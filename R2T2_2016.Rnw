\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{hyperref}
\hypersetup{
    colorlinks,
    citecolor=black,
    filecolor=black,
    linkcolor=black,
    urlcolor=black
}
\usepackage[a4paper, margin=1.5cm]{geometry}
\title{R2T2 2016}
\author{Wafa Johal}

\begin{document}
\maketitle
\tableofcontents


\SweaveOpts{concordance=TRUE}

<<eval=T,echo=F>>=
library(psych)
library(ggplot2)
library(stargazer)
library(scales)
library(plyr)
library(reshape2)
@

<<eval=true,echo=false>>=
prefix = "~/Documents/CODING/DATA_ANALYSIS/R2T2/" # Data_All_161110_E Data_All_161110(numeric)_E Data_All_161110_F Data_All_161110_F2

##### THEME
theme_Publication <- function(base_size=14, base_family="Helvetica") {
      library(grid)
      library(ggthemes)
      (theme_foundation(base_size=base_size, base_family=base_family)
       + theme(plot.title = element_text(face = "bold",
                                         size = rel(1.2), hjust = 0.5),
               text = element_text(),
               panel.background = element_rect(colour = NA),
               plot.background = element_rect(colour = NA),
               panel.border = element_rect(colour = NA),
               axis.title = element_text(face = "bold",size = rel(1)),
               axis.title.y = element_text(angle=90,vjust =2),
               axis.title.x = element_text(vjust = -0.2),
               axis.text = element_text(), 
               axis.line = element_line(colour="black"),
               axis.ticks = element_line(),
               panel.grid.major = element_line(colour="#f0f0f0"),
               panel.grid.minor = element_blank(),
               legend.key = element_rect(colour = NA),
               legend.position = "bottom",
               legend.direction = "horizontal",
               legend.key.size= unit(0.2, "cm"),
               legend.margin = unit(0, "cm"),
               legend.title = element_text(face="italic"),
               plot.margin=unit(c(10,5,5,5),"mm"),
               strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
               strip.text = element_text(face="bold")
          ))
      
}

#### COLORS
scale_fill_discrete_binary <- function(...){
      library(scales)
      discrete_scale("fill","Publications",manual_pal(values = c("#00a6a6","#f49f0a")), ...)}

scale_fill_discrete_list <- function(...){
      library(scales)
      discrete_scale("fill","Publications",manual_pal(values = c("#5f0f40","#f49f0a","#9a031e","#00a6a6","#e36414","#242f40","#008148","#15b097","#ef2917","#034732","#80ced7","#d5d6aa","#9dbbae")), ...)}

low_level = "#80b240"
high_level = "#293a13"
scale_fill_continous_list = scale_fill_gradient(low = low_level, high = high_level)


scale_colour_Publication <- function(...){
      library(scales)
      discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}

##### TOOLS FUNCTIONS
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
    library(plyr)

    # New version of length which can handle NA's: if na.rm==T, don't count them
    length2 <- function (x, na.rm=FALSE) {
        if (na.rm) sum(!is.na(x))
        else       length(x)
    }

    # This does the summary. For each group's data frame, return a vector with
    # N, mean, and sd
    datac <- ddply(data, groupvars, .drop=.drop,
      .fun = function(xx, col) {
        c(N    = length2(xx[[col]], na.rm=na.rm),
          mean = mean   (xx[[col]], na.rm=na.rm),
          sd   = sd     (xx[[col]], na.rm=na.rm)
        )
      },
      measurevar
    )

    # Rename the "mean" column    
    datac <- rename(datac, c("mean" = measurevar))

    datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean

    # Confidence interval multiplier for standard error
    # Calculate t-statistic for confidence interval: 
    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
    ciMult <- qt(conf.interval/2 + .5, datac$N-1)
    datac$ci <- datac$se * ciMult

    return(datac)
}

remove_outliers <- function(x, na.rm = TRUE, ...) {
  qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
  H <- 1.5 * IQR(x, na.rm = na.rm)
  y <- x
  y[x < (qnt[1] - H)] <- NA
  y[x > (qnt[2] + H)] <- NA
  y
}


freegeoip <- function(ip, format = ifelse(length(ip)==1,'list','dataframe'))
{
    if (1 == length(ip))
    {
        # a single IP address
        require(rjson)
        url <- paste(c("http://freegeoip.net/json/", ip), collapse='')
        ret <- fromJSON(readLines(url, warn=FALSE))
        if (format == 'dataframe')
            ret <- data.frame(t(unlist(ret)))
        return(ret)
    } else {
        ret <- data.frame()
        for (i in 1:length(ip))
        {
          i=2
        
            r <- freegeoip(ip[i], format="dataframe")

            ret <- rbind(ret, r)
        }
        return(ret)
    }
}   
@





\SweaveOpts{engine=R,eps=FALSE,echo=TRUE,prefix.string=Raw_num/plots/}
\section{Demographic Analysis}
<<eval=true,echo=false>>=
mdata <- read.csv(file.path(prefix,"Raw_num/CSV/Sheet_all_sorted.csv"))
mdata = as.data.frame(apply(mdata,2,function(x)gsub('\\s+', '',x)))
attach(mdata)
@


\subsection{Geography}
<<eval=true,echo=false>>=
locations = mdata[,c("ID.personne.interrogée","ID.collecteur" ,"Date.de.début","Date.de.fin" ,"Adresse.IP", "Âge" )] 
locations$lon =  apply(locations['Adresse.IP'],  1, function(x) freegeoip(x)$longitude)
locations$lat =  apply(locations['Adresse.IP'],  1, function(x) freegeoip(x)$latitude)
locations$city =  apply(locations['Adresse.IP'],  1, function(x) freegeoip(x)$city)

library(leaflet)
library(maps)

# all i want is the world!
world <- map("world", fill = TRUE, plot = FALSE) 
@

<<eval=true,echo=false>>=
# kick out a a widget
m = leaflet(data=world) %>% 
  addTiles() %>% 
  addCircleMarkers(locations$lon, locations$lat, 
                   color = '#ff0000',popup=locations$city)

library(htmlwidgets)
saveWidget(m, file=paste(prefix,"Raw_num/plots/map.html",sep=""))
library(webshot)
webshot(paste(prefix,"Raw_num/plots/map.html",sep=""), file = paste(prefix,"Raw_num/plots/map.png",sep=""),
        cliprect = "viewport")
@
\includegraphics{Raw_num/plots/map.png}


\subsection{Gender}
<<plot_gender,fig=T,echo=F,include=T,height=4,tidy=TRUE>>=
ggplot(mdata, aes(x=gender, fill=gender))+ geom_bar() +scale_colour_Publication()+ theme_Publication()
@

Gender data : 
<<eval=T, echo=F>>=
summary(mdata$gender)
@

\subsubsection{Age}
<<plot_gender_age,fig=T,echo=F,include=T,height=4,tidy=TRUE>>=
ggplot(mdata, aes(x=gender, y=as.numeric(levels(mdata$Âge))[mdata$Âge], fill=gender))+ geom_boxplot() +scale_colour_Publication()+ theme_Publication()
@

Age data : 
<<eval=T, echo=F>>=
summary(as.numeric(levels(mdata$Âge)))
@


\end{document}